{"version":3,"sources":["pages/Main/styles.js","styles/Theme.js","styles/global.js","api.js","App.js","serviceWorker.js","index.js"],"names":["styled","div","join","createGlobalStyle","props","theme","colors","background","link","text","fontSizes","normal","fonts","small","champagne","api","axios","create","baseURL","App","state","agendamentos","get","response","this","setState","data","map","agendamento","key","id","paciente","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"mZAEyBA,UAAOC,IAAV,KC4Cb,CAAC,YAAa,QAAS,YAAa,cAAcC,KAAK,K,snBC5CjDC,4BAAf,KAakB,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,cAMjC,SAAAH,GAAK,OAAIA,EAAMC,MAAMC,OAAOE,QAO5B,SAAAJ,GAAK,OAAIA,EAAMC,MAAMC,OAAOG,QACxB,SAAAL,GAAK,OAAIA,EAAMC,MAAMK,UAAUC,UAC7B,SAAAP,GAAK,OAAIA,EAAMC,MAAMO,SAIvB,SAAAR,GAAK,OAAIA,EAAMC,MAAMK,UAAUG,SAQnC,SAAAT,GAAK,OAAIA,EAAMC,MAAMC,OAAOQ,aAxC1BX,I,QCMAY,E,OALHC,EAAMC,OAAO,CACrBC,QAAS,oDC0DEC,E,4MAlDbC,MAAQ,CACNC,aAAc,I,kMAISN,EAAIO,IAAI,I,OAAzBC,E,OAENC,KAAKC,SAAS,CAAEJ,aAAcE,EAASG,O,qIAK/B,IAIDL,EAAgBG,KAAKJ,MAArBC,aAEP,OACE,6BACE,sDACCA,EAAaM,KAAI,SAAAC,GAAW,OAC3B,wBAAIC,IAAKD,EAAYE,IACnB,4BACE,8CACCF,EAAYG,UAEf,2BACGH,EAAYF,e,GA9BTM,aCGZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5B,QACfsB,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC3FjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDiB1C,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,GAAwB5B,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMuB,GAAN,sBAEP9B,IAgEV,SAAiCO,EAAOC,GAEtC0B,MAAM3B,EAAO,CACX4B,QAAS,CAAE,iBAAkB,YAE5BvB,MAAK,SAAAtB,GAEJ,IAAM8C,EAAc9C,EAAS6C,QAAQ9C,IAAI,gBAEnB,MAApBC,EAAS+C,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5C7B,UAAUC,cAAc6B,MAAM3B,MAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,MAAK,WAC7BV,OAAOC,SAASsC,eAKpBnC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFAsB,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAM3B,MAAK,WACjCO,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OCxC/BE,K","file":"static/js/main.eb9dd6e3.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  text-align: center;\r\n  margin-top: 2rem;\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { ThemeProvider } from 'styled-components';\r\n\r\nconst theme = {\r\n  // Palette from FlatUI - https://flatuicolors.com/palette/defo\r\n  colors: {\r\n    white: '#ffffff',\r\n    black: '#000000',\r\n    turquese: '#1abc9c',\r\n    turqueseDark: '#16a085',\r\n    green: '#2ecc71',\r\n    greenDark: '#27ae60',\r\n    blue: '#3498db',\r\n    blueDark: '#2980b9',\r\n    violet: '#9b59b6',\r\n    violetDark: '#8e44ad',\r\n    yellow: '#f1c40f',\r\n    yellowDark: '#f39c12',\r\n    orange: '#e67e22',\r\n    orangeDark: '#d35400',\r\n    red: '#e74c3c',\r\n    redDark: '#c0392b',\r\n    champagne: '#ecf0f1',\r\n    champagneDark: '#bdc3c7',\r\n    metal: '#95a5a6',\r\n    metalDark: '#7f8c8d',\r\n    asphalt: '#34495e',\r\n    asphaltDark: '#2c3e50',\r\n    carbon: '#555459',\r\n    carbonDark: '#3b3a3e',\r\n\r\n    // Default colors\r\n    primary: '#2ecc71',\r\n    secondary: '#ecf0f1',\r\n    danger: '#f37272',\r\n    light: '#ecf0f1',\r\n    dark: '#233240',\r\n    background: '#f37272',\r\n    text: '#fff',\r\n    link: '#3498db',\r\n\r\n    // Brands\r\n    devSamurai: '#f37272',\r\n  },\r\n  fonts: ['Open Sans', 'Arial', 'Helvetica', 'sans-serif'].join(','),\r\n  fontSizes: {\r\n    small: '.8rem',\r\n    normal: '1.2rem',\r\n    large: '1.3rem',\r\n    title: '1.8rem',\r\n  },\r\n};\r\n\r\nconst Theme = ({ children }) => {\r\n  return <ThemeProvider theme={theme}>{children}</ThemeProvider>;\r\n};\r\n\r\nTheme.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Theme;\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport default createGlobalStyle`\r\n  * {\r\n    margin: 0;\r\n    padding: 0;\r\n    outline: 0;\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  html, body, #root {\r\n    min-height: 100%;\r\n  }\r\n\r\n  body {\r\n    background: ${props => props.theme.colors.background};\r\n    -webkit-font-smoothing: antialiased !important;\r\n    padding: 1rem;\r\n  }\r\n\r\n  a {\r\n    color: ${props => props.theme.colors.link}\r\n  }\r\n  a.hover {\r\n    text-decoration: underline;\r\n  }\r\n\r\n  body, input, p, a, button {\r\n    color: ${props => props.theme.colors.text};\r\n    font-size: ${props => props.theme.fontSizes.normal};\r\n    font-family: ${props => props.theme.fonts};\r\n  }\r\n\r\n  small {\r\n    font-size: ${props => props.theme.fontSizes.small};\r\n  }\r\n\r\n  button {\r\n    cursor: pointer;\r\n  }\r\n\r\n  ::placeholder {\r\n    color: ${props => props.theme.colors.champagne};\r\n  }\r\n`;\r\n","import axios from 'axios';\r\n\r\n\r\nconst api = axios.create({\r\n    baseURL: 'http://7906412033cf.ngrok.io/agendamentos.todos'\r\n});\r\n\r\n\r\nexport default api;","import React, { Component } from 'react';\r\n\r\nimport { Normalize } from 'styled-normalize';\r\n\r\nimport Routes from './routes';\r\n\r\nimport Theme from './styles/Theme';\r\nimport GlobalStyle from './styles/global';\r\nimport api from './api';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    agendamentos: [],\r\n  }\r\n \r\n  async componentDidMount() {\r\n    const response = await api.get('');\r\n\r\n    this.setState({ agendamentos: response.data });\r\n  }\r\n\r\n  \r\n\r\n  render() {\r\n\r\n    \r\n\r\n    const {agendamentos} = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <h1>Listar os Agendamentos</h1>\r\n        {agendamentos.map(agendamento => (\r\n          <li key={agendamento.id}>\r\n            <h2>\r\n              <strong>Paciente: </strong>\r\n              {agendamento.paciente}\r\n            </h2>\r\n            <p>\r\n              {agendamento.data}\r\n            </p>\r\n\r\n          </li>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n};\r\n\r\n/*function App() {\r\n  return (\r\n    <Theme>\r\n      <Routes />\r\n      <GlobalStyle />\r\n      <Normalize />\r\n    </Theme>\r\n  );\r\n};*/\r\n\r\n\r\n\r\nexport default App;\r\n","/* eslint-disable */\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}